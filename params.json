{"body":"# Cirrus\r\n\r\n### What is Cirrus?\r\nSoundcloud API Reader Library to fetch and process data about users, tracks and playlists.\r\n\r\n### Any dependencies?\r\nCirrus comes as an [composer](http://getcomposer.org/) package. Requirements are >= PHP 5.3, its CURL extension and a [CURL handler class](https://github.com/fightbulc/php_curl). Also, you need an API key from Soundcloud. [Register here](http://soundcloud.com/you/apps).\r\n\r\n### Setup\r\n- Download\r\n- Run ```composer install```\r\n- Start hacking\r\n\r\n# Structure\r\nAll fetched results are wrapped in *value object* classes. This means that you can access all response values by method call.\r\n\r\n```php\r\n// print the username\r\necho $userVo->getUsername();\r\n\r\n// or lets get all tracks from the user\r\n// and then the title from the first track\r\n$tracksVo = $userVo->getTracksVo();\r\necho $tracksVo[0]->getTitle();\r\n````\r\n\r\nIn general VOs enable us to maintain our code much better. Especially if we don't have any influence on the reference as its the case with soundcloud's API.\r\n\r\nNeed more input? [Have a look](http://jmatter.org/articles/2006/08/04/tip-of-the-week-value-objects) at this piece of text.\r\n\r\n# Example: User\r\n\r\n### 1. Get user data\r\n```php\r\nrequire __DIR__ . '/../vendor/autoload.php';\r\n\r\n$clientId = '[YOUR API KEY]';\r\n$userId = 428623;\r\n\r\n$userVo = \\Cirrus\\Users\\UsersCirrus::init()\r\n  ->setClientId($clientId)\r\n  ->setId($userId)\r\n  ->fetchData();\r\n\r\nvar_dump($userVo);\r\n```\r\n\r\n**How to get e.g. a user's full name:**\r\n```php\r\n// user's full name\r\necho $userVo->getFullName();\r\n\r\n// or get all data for this user as an array\r\nvar_dump($userVo->getData());\r\n```\r\n\r\n### 2. Get user data and its relations\r\nIts up to you which data you would like to fetch. See below all possible options.\r\n\r\n```php\r\nrequire __DIR__ . '/../vendor/autoload.php';\r\n\r\n$clientId = '[YOUR API KEY]';\r\n$userId = 428623;\r\n\r\n$userVo = \\Cirrus\\Users\\UsersCirrus::init()\r\n  ->setClientId($clientId)\r\n  ->setId($userId)\r\n  ->withTracksData(TRUE)\r\n  ->withPlaylistsData(TRUE)\r\n  ->withFollowersData(TRUE)\r\n  ->withFollowingsData(TRUE)\r\n  ->withFavoritesData(TRUE)\r\n  ->fetchData();\r\n\r\nvar_dump($userVo);\r\n```\r\n\r\n### 3. Get only a certain type of a user's relation data\r\nJust need e.g. a user's tracks? Here you go:\r\n\r\n```php\r\nrequire __DIR__ . '/../vendor/autoload.php';\r\n\r\n$clientId = '[YOUR API KEY]';\r\n$userId = 428623;\r\n\r\n// get tracks by user id\r\n$userTracksVoMany = \\Cirrus\\Users\\UsersCirrus::init()\r\n  ->setClientId($clientId)\r\n  ->setId($userId)\r\n  ->fetchTracksData();\r\n\r\nvar_dump($userTracksVoMany);\r\n\r\n// or get all followers\r\n$userFollowersVoMany = \\Cirrus\\Users\\UsersCirrus::init()\r\n  ->setClientId($clientId)\r\n  ->setId($userId)\r\n  ->fetchFollowersData();\r\n\r\nvar_dump($userFollowersVoMany);\r\n```\r\n\r\n# Example: Track\r\nFetching track data is based on the same principles as for the user data.\r\n\r\n### 1. Get track data\r\n```php\r\nrequire __DIR__ . '/../vendor/autoload.php';\r\n\r\n$clientId = '[YOUR API KEY]';\r\n$trackId = 64321366;\r\n\r\n$trackVo = \\Cirrus\\Tracks\\TracksCirrus::init()\r\n  ->setClientId($clientId)\r\n  ->setId($trackId)\r\n  ->fetchData();\r\n\r\nvar_dump($trackVo);\r\n```\r\n\r\nAs you might notice the tracks data doesn't come with a complete set of user data. If you want to fetch all user details just add ```withCompleteUserData(TRUE)``` to your query:\r\n\r\n```php\r\n$trackVo = \\Cirrus\\Tracks\\TracksCirrus::init()\r\n  ->setClientId($clientId)\r\n  ->setId($trackId)\r\n  ->withCompleteUserData(TRUE)\r\n  ->fetchData();\r\n```\r\n\r\nAs a result you could now access the complete user details by ```$trackVo->getUserVo()```.\r\n\r\n# Summary of all possible queries\r\n\r\n### 1. User data\r\n**Class:**  \r\n```php\r\n\\Cirrus\\Users\\UsersCirrus\r\n```\r\n\r\n**Query:**  \r\n```php\r\n\\Cirrus\\Users\\UsersCirrus::init()\r\n  ->setClientId($clientId)\r\n  ->setId($userId)\r\n  ->fetchData();\r\n```\r\n\r\n**Relationships:**\r\n- Tracks: ```withTracksData(TRUE)``` or via ```fetchTracksData()```\r\n- Playlists: ```withPlaylistsData(TRUE)``` or via ```fetchPlaylistsData()```\r\n- Followers: ```withFollowersData(TRUE)``` or via ```fetchFollowersData()```\r\n- Followings: ```withFollowingsData(TRUE)``` or via ```fetchFollowingsData()```\r\n- Favorites: ```withFavoritesData(TRUE)``` or via ```fetchFavoritesData()```\r\n\r\n### 2. Track data\r\n**Class:**\r\n```php\r\n\\Cirrus\\Tracks\\TracksCirrus\r\n```\r\n\r\n**Query:**  \r\n```php\r\n\\Cirrus\\Users\\TracksCirrus::init()\r\n  ->setClientId($clientId)\r\n  ->setId($trackId)\r\n  ->fetchData();\r\n```\r\n\r\n**Relationships:**\r\n- User data: ```withCompleteUserData(TRUE)```\r\n\r\n### 3. Playlist data\r\n**Class:**\r\n```php\r\n\\Cirrus\\Tracks\\PlaylistsCirrus\r\n```\r\n\r\n**Query:**  \r\n```php\r\n\\Cirrus\\Users\\PlaylistsCirrus::init()\r\n  ->setClientId($clientId)\r\n  ->setId($playlistId)\r\n  ->fetchData();\r\n```\r\n\r\n**Relationships:**\r\n- User data: ```withCompleteUserData(TRUE)```\r\n\r\n# Artwork & Avatar image sizes\r\nSoundcloud offers a couple of image sizes for track artwork- and user avatars.\r\n\r\n```php\r\narray(\r\n  'original' => 'original',\r\n  '500'      => 't500x500',\r\n  '400'      => 'crop',\r\n  '300'      => 't300x300',\r\n  '100'      => 'large',\r\n  '67'       => 't67x67',\r\n  '47'       => 'badge',\r\n  '32'       => 'small',\r\n  '20'       => 'tiny_artworks', // only artworks\r\n  '18'       => 'tiny_avatars',  // only avatars\r\n  '16'       => 'mini',\r\n);\r\n```\r\n\r\nSoundcloud's default size is set to ```large```. To choose from one of the above listed sizes you can make use of ```\\Cirrus\\Cirrus::getImageUrlBySize($imageUrl, $size)```.\r\n\r\n### User avatar\r\n```php\r\nrequire __DIR__ . '/../vendor/autoload.php';\r\n\r\n$clientId = '[YOUR API KEY]';\r\n$userId = 428623;\r\n\r\n$userVo = \\Cirrus\\Users\\UsersCirrus::init()\r\n  ->setClientId($clientId)\r\n  ->setId($userId)\r\n  ->fetchData();\r\n\r\n// set image size to 400x400\r\n\\Cirrus\\Cirrus::getImageUrlBySize($userVo->getUrlAvatar(), 400); // http://i1.sndcdn.com/avatars-000000788968-kgr595-crop.jpg?e2f8ae2\r\n```\r\n\r\n### Track artwork\r\n```php\r\nrequire __DIR__ . '/../vendor/autoload.php';\r\n\r\n$clientId = '[YOUR API KEY]';\r\n$trackId = 64321366;\r\n\r\n$trackVo = \\Cirrus\\Tracks\\TracksCirrus::init()\r\n  ->setClientId($clientId)\r\n  ->setId($trackId)\r\n  ->fetchData();\r\n\r\n// set image size to original size\r\n\\Cirrus\\Cirrus::getImageUrlBySize($trackVo->getUrlAvatar(), 'original'); // http://i1.sndcdn.com/artworks-000032638740-ttuwkl-original.jpg?e2f8ae2\r\n```\r\n\r\n# Anything else?\r\nStill in doubt how to use this library? Have a look at the ```test``` folder. I included there examples for all fetchable data. Make sure that you rename the ```config.php.dist``` to ```config.php```. And don't forget to put your API Key.\r\n\r\n# License\r\nCirrus is freely distributable under the terms of the MIT license.\r\n\r\nCopyright (c) 2012 Tino Ehrich ([opensource@efides.com](mailto:opensource@efides.com))\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Soundcloud API Reader Library to fetch data for users, tracks and playlists.","name":"Cirrus","google":""}